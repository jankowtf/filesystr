% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{methods}
\name{decomposePath,character-method}
\alias{decomposePath,character-method}
\title{Decompose Path}
\usage{
\S4method{decomposePath}{character}(path = ".", dir_slash = FALSE,
  shortform = FALSE, ...)
}
\arguments{
\item{path}{\code{\link{character}}. Vector of file paths.
Default: files in current directory.}

\item{dir_slash}{\code{\link{logical}}.
Are directory paths denoted by a trailing slash (\code{TRUE}) or
not (\code{FALSE}, default). See details.}

\item{shortform}{\code{\link{logical}}. Dimension: 1.
Use shortforms (\code{TRUE}) for \code{getwd()} (i.e. \code{"."},
    \code{dirname(getwd()} (i.e. \code{".."} and \code{HOME} (i.e. \code{"~"})
    or not (\code{FALSE}, default).}

\item{...}{Further arguments passed to:
\code{\link[filesystr]{standardizePath}}}
}
\value{
character \code{matrix} with three
   columns named \code{"dirname"}, \code{"filename"} and \code{"extension"}.
   \code{strip_extension} returns a character vector of the second column,
   and \code{get_extension} returns a character vector of the third column.
   \code{recompose_path} returns a character vector of paths.
}
\description{
See generic: \code{\link[filesystr]{decomposePath}}.
}
\examples{
\dontrun{

## Auxiliary function //
carefulCleanup <- function(x, pattern=basename(tempdir())) {
  out <- sapply(x, function(ii) {
    out <- NA
    if (grepl(pattern, ii)) {
      out <- unlink(ii, recursive=TRUE, force=TRUE)
    }        
    out
  })
  invisible(out)
}  
  
## Create example content //  
to_create <- file.path(tempdir(), "decomposePath", c("dir_a", file.path("dir_b", "sub_1")))
sapply(to_create, dir.create, recursive = TRUE, showWarnings = FALSE)
file.create(file.path(tempdir(), "decomposePath/dir_b/sub_1/file.txt"))

## Change working directory //
wd_0 <- getwd()
setwd(file.path(tempdir(), "decomposePath"))
## Make sure you undo this with 'setwd(wd_0)' when you are finished!!!

path <- c(
  ".",
  "..",
  "dir_a", 
  "dir_a/",
  "dir_b", 
  "dir_b/sub_1",
  "dir_b/sub_1/file.txt",
  "dir_b/sub_1/file.txt/",
  "dir_b/nonex",
  "dir_b/nonex/",
  "dir_b/nonex/file.txt",
  "nonex",
  "nonex/sub_1",
  "nonex/sub_1/file.txt",
  "nonex/foo.tgz", 
  "another nonex\\\\file.tar.gz", 
  "a_file", 
  "quux. quuux.tbz2", 
  "~/file.tar.xz",
  "", 
  NA_character_
)

res <- decomposePath(path = path)
res
class(res)

decomposePath(path = path, dir_slash = TRUE)
decomposePath(path = path, shortform = TRUE)
decomposePath(path = path, dir_slash = TRUE, shortform = TRUE)

decomposePath()
decomposePath(path = character())
decomposePath(path = NA_character_)

## Clean up //
## Reset working directory:
setwd(wd_0)

## Remove tempdir directory:
carefulCleanup(x = file.path(tempdir(), "decomposePath"))

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://www.rappster.de/rapp/filesystr}
}
\seealso{
\code{
		\link[filesystr]{decomposePath},
		\link[filesystr]{decomposePath-missing-method}
}
}

