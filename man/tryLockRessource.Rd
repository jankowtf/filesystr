% Generated by roxygen2 (4.0.1): do not edit by hand
\name{tryLockRessource}
\alias{tryLockRessource}
\title{Try to Lock Files System Ressource}
\usage{
tryLockRessource(path, try_limit = 100, strict = FALSE, ...)
}
\arguments{
\item{path}{\strong{Signature argument}.
Object containing file system path information.}

\item{try_limit}{\code{\link{numeric}}.
Limit for trying to lock ressource.}

\item{strict}{\code{\link{logical}}.
\code{TRUE}: when \code{try_limit} is reached, an error is thrown;
\code{FALSE}: when \code{try_limit} is reached, method returns with \code{FALSE}.}

\item{...}{Further arguments passed to subsequent functions/methods.
In particular:
     \code{\link[filesystr]{isRessourceLocked},
   \link[filesystr]{lockRessource}}.}
}
\description{
Locks file system ressource if it is not locked yet, else tries \code{try_limit}
times to lock it after it it has been made available again. If \code{try_limt}
is reached, either \code{FALSE} is returned or an error is thrown
(depends on \code{strict}).
}
\examples{
\dontrun{

## Example content //
path <- file.path(tempdir(), "test/registry.rdata")
file.create(path)
  
## File //
lockRessource(path = path)
tryLockRessource(path = path, try_limit = 3)
try(tryLockRessource(path = path, try_limit = 3, strict = TRUE))
unlockRessource(path = path)
tryLockRessource(path = path)
unlockRessource(path = path)

## Directory //
path <- dirname(path)
lockRessource(path = path)
tryLockRessource(path = path, try_limit = 3)
try(tryLockRessource(path = path, try_limit = 3, strict = TRUE))
unlockRessource(path = path)
tryLockRessource(path = path)
unlockRessource(path = path)

## Non-existing ressource //
expect_error(tryLockRessource(path = "abcd", strict = TRUE))

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://www.rappster.de/rapp/filesystr}
}
\seealso{
\code{
   \link[filesystr]{tryLockRessource-character-method}
}
}

